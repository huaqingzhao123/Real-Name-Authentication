## Bitnami Redis image version
## ref: https://hub.docker.com/r/bitnami/redis/tags/
##
image: redislabs/rebloom:2.0.3

## Specify a imagePullPolicy
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
##
imagePullPolicy: IfNotPresent

## Kubernetes service type
serviceType: ClusterIP

#fullnameOverride: basket-rediscache

## Pod Security Context
securityContext:
  enabled: false #lin: 启用后用户组和用户名均不在root组内，会导致提权的init 容器失败
  fsGroup: 1001
  runAsUser: 1001


## Redis command arguments
##
## Can be used to specify command line arguments, for example:
##
## args:
##  - "redis-server"
##  - "--maxmemory-policy volatile-ttl"
args:
    - "redis-server"
    - "/usr/local/etc/redis/redis.conf"

## Redis additional command line flags
##
## Can be used to specify command line flags, for example:
##
## redisExtraFlags:
##  - "--maxmemory-policy volatile-ttl"
##  - "--repl-backlog-size 1024mb"
redisExtraFlags:

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
  
persistence:
  enabled: true

  ## The path the volume will be mounted at, useful when using different
  ## Redis images.
  configPath: /usr/local/etc/redis

  ## The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services.
  subConfigPath: "redis/conf"

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## redis data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 10Mi #只是用来存储配置文件，所以限定大小为10mb即可

metrics:
  enabled: false
  image: oliver006/redis_exporter
  imageTag: v0.11
  imagePullPolicy: IfNotPresent
  resources: {}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 256Mi
    cpu: 100m

## Node labels and tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
nodeSelector: {}
tolerations: []

## Additional pod labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

## annotations for redis pods
podAnnotations: {}

networkPolicy:
  ## Enable creation of NetworkPolicy resources.
  ##
  enabled: false

  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to the port Redis is listening
  ## on. When true, Redis will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true

service:
  annotations: {}
  loadBalancerIP:
